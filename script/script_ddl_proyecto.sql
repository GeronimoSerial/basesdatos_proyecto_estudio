-- =========================
-- GEOGRAFÍA
-- =========================
create schema if not exists geografia;

create table geografia.provincia (
    id_provincia int generated by default as identity,
    nombre varchar(50) not null,
    constraint pk_provincia primary key (id_provincia)
);

create table geografia.departamento (
    id_departamento int generated by default as identity,
    nombre varchar(50) not null,
    id_provincia int not null,
    constraint pk_departamento primary key (id_departamento),
    constraint fk_departamento_provincia foreign key (id_provincia) REFERENCES geografia.provincia (id_provincia)
);

create table geografia.localidad (
    id_localidad int generated by default as identity,
    nombre varchar(50) not null,
    id_departamento int not null,
    constraint pk_localidad primary key (id_localidad),
    constraint fk_localidad_departamento foreign key (id_departamento) REFERENCES geografia.departamento (id_departamento)
);

create table geografia.domicilio (
    id_domicilio int generated by default as identity,
    calle varchar(50) not null,
    altura int not null,
    id_localidad int not null,
    constraint pk_domicilio primary key (id_domicilio),
    constraint fk_domicilio_localidad foreign key (id_localidad) references geografia.localidad (id_localidad)
);

-- =========================
-- INFRAESTRUCTURA
-- =========================
create schema if not exists infraestructura;

create table infraestructura.edificio (
    id_edificio int generated by default as identity,
    id_domicilio int not null,
    constraint pk_edificio primary key (id_edificio),
    constraint fk_edificio_domicilio foreign key (id_domicilio) references geografia.domicilio (id_domicilio)
);

create table infraestructura.proveedor (
    id_proveedor int generated by default as identity,
    nombre varchar(50) not null,
    constraint pk_proveedor primary key (id_proveedor),
    constraint uq_proveedor unique (nombre)
);

create table infraestructura.tecnologia (
    id_tecnologia int generated by default as identity,
    descripcion varchar(50) not null, -- wifi, cableado, etc.
    constraint pk_tecnologia primary key (id_tecnologia)
);

create table infraestructura.calidad_servicio (
    id_calidad_servicio int generated by default as identity,
    descripcion varchar(50) not null, -- MALA BUENA MUY MALA ETC.
    constraint pk_calidad_servicio primary key (id_calidad_servicio)
);

create table infraestructura.edificio_conexion (
    id_edificio_conexion int generated by default as identity,
    id_edificio int not null,
    id_proveedor int not null,
    id_tecnologia int not null,
    id_calidad_servicio int not null,
    fecha_relevamiento date default CURRENT_DATE,
    observaciones varchar(200) null,
    constraint pk_edificio_conexion primary key (id_edificio_conexion),
    constraint fk_ec_edificio foreign key (id_edificio) references infraestructura.edificio (id_edificio),
    constraint fk_ec_proveedor foreign key (id_proveedor) references infraestructura.proveedor (id_proveedor),
    constraint fk_ec_tecnologia foreign key (id_tecnologia) references infraestructura.tecnologia (id_tecnologia),
    constraint fk_ec_calidad_servicio foreign key (id_calidad_servicio) references infraestructura.calidad_servicio (id_calidad_servicio)
);

-- =========================
-- RRHH
-- =========================
create schema if not exists rrhh;

create table rrhh.persona (
    id_persona int generated by default as identity,
    dni int not null,
    nombre varchar(50) not null,
    apellido varchar(50) not null,
    telefono NUMERIC(20) not null,
    mail varchar(100) not null,
    constraint pk_persona primary key (id_persona),
    constraint uq_persona_dni unique (dni),
    constraint uq_persona_mail unique (mail),
    constraint ck_persona_dni check (
        dni between 1000000 and 99999999
    )
);

create unique index uq_persona_mail_lower on rrhh.persona (lower(mail));

create table rrhh.rol (
    id_rol int generated by default as identity,
    codigo varchar(20) not null,
    constraint uq_rol_codigo unique (codigo),
    constraint pk_rol primary key (id_rol)
);

-- =========================
-- INSTITUCIONAL
-- =========================
create schema if not exists institucional;

CREATE TABLE institucional.servicio_comida (
    id_serv_comida INT generated by default as identity,
    nombre VARCHAR(50) NOT NULL,
    constraint pk_servicio_comida PRIMARY KEY (id_serv_comida)
);

CREATE TABLE institucional.categoria (
    id_categoria INT NOT NULL,
    codigo INT NOT NULL,
    descripcion VARCHAR(100) NOT NULL,
    constraint pk_categoria PRIMARY KEY (id_categoria),
    constraint uq_categoria_codigo UNIQUE (codigo)
);

CREATE TABLE institucional.zona (
    id_zona INT NOT NULL,
    codigo CHAR(1) NOT NULL,
    descripcion VARCHAR(100) NOT NULL,
    constraint pk_zona PRIMARY KEY (id_zona),
    constraint uq_zona_codigo UNIQUE (codigo)
);

create table institucional.turno (
    id_turno int generated always as identity,
    descripcion varchar(50),
    constraint pk_turno primary key (id_turno)
);

CREATE TABLE institucional.modalidad (
    id_modalidad INT generated by default as identity,
    descripcion VARCHAR(100) NOT NULL,
    constraint pk_modalidad PRIMARY KEY (id_modalidad)
);

CREATE TABLE institucional.escuela (
    cue BIGINT NOT NULL,
    nombre VARCHAR(100) NOT NULL,
    fecha_fundacion DATE NULL,
    telefono NUMERIC(20) NOT NULL,
    mail VARCHAR(100) NOT NULL,
    id_escuela INT generated by default as identity,
    cabecera_id INT NULL,
    id_serv_comida INT NOT NULL,
    id_categoria INT NOT NULL,
    id_zona INT NOT NULL,
    id_modalidad INT NOT NULL,
    id_turno INT NOT NULL,
    constraint pk_escuela PRIMARY KEY (id_escuela),
    constraint fk_escuela_cabecera FOREIGN KEY (cabecera_id) REFERENCES institucional.escuela (id_escuela),
    constraint fk_escuela_servicio_comida FOREIGN KEY (id_serv_comida) REFERENCES institucional.servicio_comida (id_serv_comida),
    constraint fk_escuela_categoria FOREIGN KEY (id_categoria) REFERENCES institucional.categoria (id_categoria),
    constraint fk_escuela_zona FOREIGN KEY (id_zona) REFERENCES institucional.zona (id_zona),
    constraint fk_escuela_modalidad FOREIGN KEY (id_modalidad) REFERENCES institucional.modalidad (id_modalidad),
    constraint fk_escuela_turno FOREIGN KEY (id_turno) REFERENCES institucional.turno (id_turno),
    constraint uq_escuela_cue UNIQUE (cue),
    constraint uq_escuela_mail UNIQUE (mail)
);



-- =========================
-- Cargos
-- =========================

create schema if not exists vacantes;

-- Catálogo de cargos (prefijo-sufijo)
CREATE TABLE vacantes.cargo (
    id_cargo INT GENERATED BY DEFAULT AS IDENTITY,
    prefijo INT NOT NULL, -- p.ej., 05 (se guarda por escalabilidad)
    sufijo INT NOT NULL, -- p.ej., 328 (se usa para identificar el puesto)
    descripcion VARCHAR(100),
    id_rol INT NOT NULL,
    codigo_display VARCHAR(20) GENERATED ALWAYS AS (
        LPAD(prefijo::TEXT, 2, '0') || '-' || LPAD(sufijo::TEXT, 3, '0')
    ) stored,
    CONSTRAINT uq_cargo_prefijo_sufijo UNIQUE (prefijo, sufijo),
    constraint pk_cargo primary key (id_cargo),
    constraint fk_cargo_rol foreign key (id_rol) references rrhh.rol (id_rol)
);

-- Plazas (físicas) por escuela
CREATE TABLE vacantes.plaza (
    id_plaza INT GENERATED BY DEFAULT AS IDENTITY,
    id_escuela INT NOT NULL,
    prefijo INT NOT NULL,
    sufijo INT NOT NULL,
    codigo_display VARCHAR(20) GENERATED ALWAYS AS (
        LPAD(prefijo::TEXT, 2, '0') || '-' || LPAD(sufijo::TEXT, 3, '0')
    ) stored,
    descripcion VARCHAR(150),
    id_turno INT NOT NULL,
    id_cargo INT NOT NULL,
    constraint fk_plaza_escuela foreign key (id_escuela) references institucional.escuela (id_escuela),
    CONSTRAINT pk_plaza PRIMARY KEY (id_plaza, id_escuela),
    CONSTRAINT fk_plaza_turno FOREIGN KEY (id_turno) REFERENCES institucional.turno (id_turno),
    CONSTRAINT fk_plaza_cargo FOREIGN KEY (id_cargo) REFERENCES vacantes.cargo (id_cargo),
    -- dentro de la escuela, un único código plaza (prefijo-sufijo)
    CONSTRAINT uq_plaza_codigo_por_escuela UNIQUE (id_escuela, prefijo, sufijo)
    -- validaciones básicas
    -- CONSTRAINT chk_plaza_prefijo_pos CHECK (prefijo > 0),
    -- CONSTRAINT chk_plaza_sufijo_pos CHECK (sufijo > 0)
);


-- Índices útiles para consultas
CREATE INDEX IF NOT EXISTS ix_plaza_escuela_cargo ON vacantes.plaza (id_escuela, id_cargo);


create schema if not exists supervision;

create table supervision.supervisor_escuela (
    id_persona int not null,
    id_cargo int not null,
    id_escuela int not null,
    id_autoridad int not null,
    constraint pk_supervisor_escuela PRIMARY KEY (id_escuela),
    constraint fk_se_escuela foreign key (id_escuela) references institucional.escuela (id_escuela),
    constraint fk_se_persona foreign key (id_persona) references rrhh.persona (id_persona),
    constraint fk_se_cargo foreign key (id_cargo) references vacantes.cargo (id_cargo),
    constraint fk_se_autoridad foreign key (id_autoridad) references normativa.autoridad (id_autoridad)
);

create index idx_se_por_persona on supervision.supervisor_escuela (id_persona);

create schema if not exists relevamiento;

create table relevamiento.problematica (
    id_problematica int generated by default as identity,
    dimension varchar(50) not null,
    descripcion varchar(50),
    constraint pk_problematica primary key (id_problematica)
);

create table relevamiento.escuela_problematica (
    id_problematica int not null,
    id_escuela int not null,
    constraint pk_escuela_problematica primary key (id_problematica, id_escuela),
    constraint fk_ep_problematica foreign key (id_problematica) references relevamiento.problematica (id_problematica),
    constraint fk_ep_escuela foreign key (id_escuela) references institucional.escuela (id_escuela)
);

create schema if not exists programas;

create table programas.programa_acompanamiento (
    id_programa int generated by default as identity,
    descripcion varchar(100) not null,
    constraint pk_programa_acompanamiento primary key (id_programa)
);

create table programas.escuela_programa (
    id_programa int not null,
    id_escuela int not null,
    constraint pk_escuela_programa primary key (id_programa, id_escuela),
    constraint fk_ep_programa foreign key (id_programa) references programas.programa_acompanamiento (id_programa),
    constraint fk_ep_escuela foreign key (id_escuela) references institucional.escuela (id_escuela)
);
create table relevamiento.personal_tipo (
    id_personal_tipo int generated by default as identity,
    codigo varchar(20) not null,
    nombre varchar(100) not null,
    id_rol int null,
    activo boolean not null default true,
    constraint uq_personal_tipo_codigo unique (codigo),
    constraint pk_personal_tipo primary key (id_personal_tipo),
    constraint fk_personal_tipo_rol foreign key (id_rol) references rrhh.rol (id_rol)
)

create table relevamiento.personal (
    id_escuela int not null,
    anio int not null,
    id_personal_tipo int not null,
    cantidad int not null,
    observaciones varchar(200),
    constraint pk_personal primary key (
        id_escuela,
        anio,
        id_personal_tipo
    ),
    constraint fk_personal_tipo foreign key (id_personal_tipo) references relevamiento.personal_tipo (id_personal_tipo),
    constraint fk_personal_escuela foreign key (id_escuela) references institucional.escuela (id_escuela),
    constraint ck_personal_cantidad check (cantidad >= 0),
    constraint ck_personal_anio check (anio >= 2000)
)

create index if not exists ix_personal_escuela_anio on relevamiento.personal (id_escuela, anio);

create index if not exists ix_personal_tipo on relevamiento.personal (id_personal_tipo);

create table institucional.ambito_escuela (
    id_ambito int generated by default as identity,
    codigo varchar(20) not null,
    activo boolean not null default true,
    constraint uq_ambito_codigo unique (codigo),
    constraint pk_ambito primary key (id_ambito)
)

insert into
    institucional.ambito_escuela (codigo)
values ('URBANA'),
    ('RURAL');

alter table institucional.escuela add column id_ambito int null;

alter table institucional.escuela
add constraint fk_escuela_ambito foreign key (id_ambito) references institucional.ambito_escuela (id_ambito);

create table institucional.director_escuela (
    id_director_escuela int generated by default as identity,
    id_plaza int not null,
    id_escuela int not null,
    id_persona int not null,
    fecha_inicio DATE not null DEFAULT CURRENT_DATE,
    fecha_fin DATE null,
        constraint pk_director_escuela primary key (id_director_escuela),
        constraint fk_director_persona foreign key (id_persona) references rrhh.persona (id_persona),
        constraint fk_director_plaza_escuela foreign key(id_plaza, id_escuela) references vacantes.plaza (id_plaza, id_escuela)
)


-- =========================
-- TIMESTAMPS
-- =========================

alter table rrhh.persona
add column created_at timestamp with time zone not null default current_timestamp,
add column updated_at timestamp with time zone not null default current_timestamp;

alter table institucional.escuela
add column created_at timestamp with time zone not null default current_timestamp,
add column updated_at timestamp with time zone not null default current_timestamp;

alter table normativa.disposicion
add column created_at timestamp with time zone not null default current_timestamp,
add column updated_at timestamp with time zone not null default current_timestamp;

alter table vacantes.vacante
add column created_at timestamp with time zone not null default current_timestamp,
add column updated_at timestamp with time zone not null default current_timestamp;

alter table vacantes.asignacion
add column created_at timestamp with time zone not null default current_timestamp,
add column updated_at timestamp with time zone not null default current_timestamp;

alter table infraestructura.edificio_conexion
add column created_at timestamp with time zone not null default current_timestamp,
add column updated_at timestamp with time zone not null default current_timestamp;
